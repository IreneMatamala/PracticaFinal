name: Deploy to AKS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tests
      run: |
        echo "Running application tests..."
        cd src/backend
        pip install -r requirements.txt
        python test_app.py

  deploy-app:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: azure/aks-set-context@v3
      with:
        resource-group: techwave-rg
        cluster-name: techwave-aks

    - name: Deploy Application
      run: |
        echo "Deploying TechWave application..."
        kubectl apply -f k8s/app/ -n techwave-app
        
        echo "Waiting for application to be ready..."
        kubectl rollout status deployment/frontend-deployment -n techwave-app --timeout=300s
        kubectl rollout status deployment/backend-deployment -n techwave-app --timeout=300s
        
        echo "Application deployed successfully!"
        kubectl get all -n techwave-app

    - name: Test Application
      run: |
        echo "Testing application..."
        kubectl port-forward -n techwave-app service/frontend-service 8080:80 &
        sleep 10
        curl -f http://localhost:8080/ || echo "Frontend test failed"
        
        kubectl port-forward -n techwave-app service/backend-service 5000:5000 &
        sleep 5
        curl -f http://localhost:5000/health || echo "Backend test failed"

  setup-monitoring:
    needs: deploy-app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: azure/aks-set-context@v3
      with:
        resource-group: techwave-rg
        cluster-name: techwave-aks
        
        
    - name: Install Monitoring Stack
      run: |
        echo "üîß Configurando Helm y repositorios..."
        
        # 1. Agregar repositorio con URL completa
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        
        # 2. Actualizar repositorios
        helm repo update
        
        # 3. Verificar repositorios
        helm repo list
        
        echo "üöÄ Instalando stack de monitoring..."
        
        # 4. Instalar con timeout extendido
        helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --wait \
          --timeout 20m \
          --set prometheus.prometheusSpec.resources.requests.memory=512Mi \
          --set prometheus.prometheusSpec.resources.requests.cpu=200m \
          --set grafana.resources.requests.memory=256Mi \
          --set grafana.resources.requests.cpu=100m
        
        echo "‚úÖ Monitoring instalado - Verificando..."
        
        # 5. Verificar instalaci√≥n
        kubectl get pods -n monitoring -w &
        sleep 60
        kubectl get all -n monitoring

    - name: Debug Helm Issues
      run: |
        echo "üîç Diagn√≥stico de Helm..."
        helm version
        helm repo list
        kubectl cluster-info
        echo "üìä Recursos del cluster:"
        kubectl describe nodes

    - name: Apply Additional Monitoring Components
      run: |
        echo "Applying additional monitoring components..."
        
        kubectl apply -f k8s/monitoring/loki.yaml -n monitoring
        kubectl apply -f k8s/monitoring/open-telemetry.yaml -n monitoring
        
        echo "Additional components deployed:"
        kubectl get pods -n monitoring | grep -E "(loki|otel)"

    - name: Apply Custom Dashboards and Alerts
      run: |
        echo "Applying custom dashboards and alerts..."
        kubectl apply -f alerts-Monitoring/ -n monitoring
        
        echo "Custom monitoring configuration applied!"
        kubectl get configmaps -n monitoring | grep -E "(grafana|prometheus)"
