name: Deploy app a AKS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tests
      run: |
        cd src/backend
        pip install -r requirements.txt
        python test_app.py

  deploy-app:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: azure/aks-set-context@v3
      with:
        resource-group: techwave-rg
        cluster-name: techwave-aks

    - name: Deploy Application
      run: |
        echo "Desplegando la app TechWave..."
        kubectl apply -f k8s/app/ -n techwave-app
        
        echo "..."
        kubectl rollout status deployment/frontend-deployment -n techwave-app --timeout=300s
        kubectl rollout status deployment/backend-deployment -n techwave-app --timeout=300s
        
        echo "App desplegada"
        kubectl get all -n techwave-app

    - name: Test Application
      run: |
        echo "Testeando"
        kubectl port-forward -n techwave-app service/frontend-service 8080:80 &
        sleep 10
        curl -f http://localhost:8080/ || echo "Frontend test failed"
        
        kubectl port-forward -n techwave-app service/backend-service 5000:5000 &
        sleep 5
        curl -f http://localhost:5000/health || echo "Backend test failed"

  setup-monitoring:
    needs: deploy-app
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Connect to AKS
      uses: azure/aks-set-context@v3
      with:
        resource-group: techwave-rg
        cluster-name: techwave-aks
        
        
    - name: Install Monitoring Stack
      run: |
        echo "ðŸš€ Instalando monitoring con timeout extendido..."
        
        helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --wait \
          --timeout 22m \          
          --atomic \               
          --set prometheus.prometheusSpec.resources.requests.cpu=100m \
          --set prometheus.prometheusSpec.resources.requests.memory=256Mi \
          --set grafana.resources.requests.cpu=50m \
          --set grafana.resources.requests.memory=128Mi
        
        echo "InstalaciÃ³n completada"

    - name: Apply Additional Monitoring Components
      run: |
        echo "Instalando loki y OT"
        
        kubectl apply -f k8s/monitoring/loki.yaml -n monitoring
        kubectl apply -f k8s/monitoring/open-telemetry.yaml -n monitoring
        
        echo "Loki y OT descargados:"
        kubectl get pods -n monitoring | grep -E "(loki|otel)"

    - name: Apply Custom Dashboards and Alerts
      run: |
        echo "Creando los dashboards y alertas..."
        kubectl apply -f alerts-Monitoring/ -n monitoring
        
        echo "Monitoring configurado y personalizado"
        kubectl get configmaps -n monitoring | grep -E "(grafana|prometheus)"
